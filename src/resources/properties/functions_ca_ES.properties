# To change this template, choose Tools | Templates
# and open the template in the editor.
msg_search=\n\ \ \ \ funci\u00f3 consultar ( k, b )  retorna TObjeto \u00e9s \n             var\n                 trobat : boolea\n                 actual : *node \n             fvar\n             actual := arrel\n             trobat := fals \n             mentres !trobat && actual != null fer\n                     si actual.clau = k llavors \n                             trobat := cert \n                     sino si actual.clau ? k llavors \n                             actual := actual.fd \n                     sino \n                             actual := actual.fe \n                     fsi \n             fmentres \n             si trobat llavors \n                     b := cert \n                     retorna actual.val \n             sino \n                     b := fals \n                     no retorna res \n             fsi \n     ffunci\u00f3\n
msg_b_insert=\n\ \ \ \ funci\u00f3 inserir (r, dato) retorna BNode<T> \u00e9s \n        var\n            compara: Enter \n        fvar\n        si !trobat(data) llavors \n            si r==null llavors\n                retorna CrearArrel(data) \n            fsi \n            compara:=Comparar(r.Valor,data) \n            si compara>0 llavors \n                r.InserirNodeEsq(data) \n            sino \n                r.InserirNodeDret(data) \n            fsi \n        fsi \n    ffunci\u00f3 \n
msg_b_delete=\n\ \ \ \ funcio esborrar ( node_actual , valor_existent ) retorna BNodo<T> es\n        var\n            comparacio: Enter\n            node_a_canviar: BNode<T>\n            aux: Enter\n        fvar\n        si node_actual == null llavors retorna nul fsi\n        compara := Comparar (node_actual.valor,valor_existent)\n        si comparacio > 0 llavors\n            node_actual.nodeEsq := esborrar(node_actual.nodeEsq, valor_existent);\n        sino\n            si comparacio < 0 llavors\n                node_actual.nodeDret := esborrar(node_actual.nodeDret, valor_existent);\n            sino\n                 si node_actual.nodeEsq <> null && node_actual.nodeDret <> null llavors\n                    node_a_canviar := cercarMin(node_actual.nodeDret)\n                    aux := node_a_canviar.valor\n                    node_actual.nodeDret= esborrar(node_actual.nodeDret,valor_existent)\n                sino\n                    si node_actual<>null llavors\n                        node_actual := node_actual.nodeEsq\n                    sino\n                        node_actual := node_actual.nodeDret\n                    fsi\n                fsi\n            fsi\n        fsi\n        retorna node_actual;\n    ffuncio
msg_father=\n\ \ \ \ funci\u00f3 retornarPare node, valor retorna BNode<T> es\n      var\n         y:BNode<T>\n      fvar\n      si node == null node retorna nulo fsi\n      si node.nodeEsq <> null && node.nodeEsq.valor == valor llavors\n         retorna node\n      fsi\n      y:= retornarPadre(node.nodeEsq,valor)\n      si y == null llavors\n         retorna retornarPadre(node.nodeDret,valor)\n      sino\n         retorna y\n      fsi\n   ffunci\u00f3
msg_getLeaves=\n\ \ \ \ funci\u00f3 retornarFulles (node_actual, llistat_fulles) es\n        si node_actual <> null llavors\n            si esHoja(node_actual) llavors\n                afegirFulla(llistat_fulles,node_actual.valor)\n            fsi\n            si node_actual.nodeEsq <> null llavors\n                retornarFulla(node_actual.nodeEsq,llistat_fulles)\n            fsi\n\t    si node_actual.nodeDret<>null llavors  \n                retornarFulla(node_actual.nodeDret,llistat_fulles)\n             fsi\n        fsi\n    ffunci\u00f3
msg_cutLeaves=\n\ \ \ \ funci\u00f3 podar es\n        var\n            it: Iterador<T>\n        fvar\n        it:= retornarFulles();\n        mentres !esFinal(it) fer\n            esborrar (it.valor);\n        fmentres\n    ffunci\u00f3
msg_avl_insert=\ \ \ funci\u00f3 inserir (node_actual, nou_node) retorna boleano es\n      si node_actual == nul llavors \n         arrel = nou_node \n      sino\n         si nou_node.valor < node_actual.valor llavors\n            si node_actual == nul llavors\n               node_actual.nodeEsq = nou_node\n               nou_node.arrel = node_actual\n               balan\u00e7Recursiu (node_actual)\n            sino\n               inserir(node_actual.nodeEsq,nou_node)\n            fsi\n         sino si nou_node.valor > node_actual.valor llavors\n            si node_actual.nodeDret == nul llavors\n               node_actual.nodeDret = nou_node\n               nou_node.arrel = node_actual\n               balan\u00e7Recursiu(node_actual)\n            sino\n               inserir(node_actual,nou_node)\n            fsi\n         sino\n            retorna nul\n         fsi\n      fsi\n   ffunci\u00f3
msg_avl_delete=\n\ \ \ funci\u00f3 esborrar (node_actual, nou_valor) retorna Objeto es\n      si node_actual == nulo llavors \n\tretorna nulo\n      sino\n         si node_actual.valor > nou_valor llavors\n            esborrar (node_actual.nodeEsq,nou_valor)\n         sino si node_actual.valor < nou_valor llavors\n            esborrar (node_actual.nodoDret,nou_valor)\n         sino si node_actual.valor == nou_valor llavors\n            esborrarNode (node_actual)\n         fsi\n      fsi\n   ffunci\u00f3
msg_rb_insert=\ \ \ funci\u00f3 inserir (nou_node) es\n      var\n         y: RBNode<T>\n         x: RBNode<T>\n      fvar\n      mentres !vuit(x) fer\n         y = x;\n         si nou_node.valor < x.valor llavors\n            x.numIzquierdo = x.numIzquierdo + 1\n            x = x.nodeEsq\n         sino\n            x.numDerecho = x.numDerecho + 1\n            x = x.nodeDret\n         fsi\n      fmentres\n      nou_node.raiz = y\n      si vuit(y)\n         raiz = nou_node\n      sino si nou_node.valor < y.valor llavors\n         y.nodeEsq = z\n      sino\n         y.nodeDret = z\n      fsi\n      nou_node.nodeEsq = nodo_vuit\n      nou_node.nodeDret = nodo_vuit\n      nou_node.color = VERMELL\n      modificarNum(nou_node)\n   ffunci\u00f3
msg_rb_delete=\ \ \ funci\u00f3 esborrar (valor) retorna TObject es\n      var\n         y: RBNode<T>\n         x: RBNode<T>\n         nou_node := cercaNode(valor)\n      fvar\n      y := vuit\n      x := vuit\n      si vuit(node.nodeEsq || node.nodeDret) llavors\n         y := node;\n      sino\n         cercaSucesor(nou_node)\n      fsi\n      si !vuit(y.nodeEsq) llavors\n         x := y.nodeEsq\n      sino \n         x := y.nodeDret\n      fsi\n      x.arrel := y.arrel\n      si vuit(y.arrel) llavors\n         x.arrel := x\n      sino si !esVuit(y.arrel.nodeEsq) && y.arrel.nodeEsq == y\n         y.arrel.nodeEsq := x\n      sino si !esVuit(y.arrel.nodeDret) && y.arrel.nodeDret == y\n         y.arrel.nodeDret := x\n      fsi\n      si y <> nou_node llavors\n         nou_node.valor := y.valor\n      fsi\n      fixNodeData (x,y)\n      si y.color == NEGRO llavors\n         ModificarNumero(x)\n      fsi\n      retorna valor     \n   ffunci\u00f3
