In addition to the requirements imposed on a binary search trees, with red–black trees:

- A node is either red or black.
- The root is black. (This rule is sometimes omitted. Since the root can always be 
  changed from red to black, but not necessarily vice-versa, this rule has little effect 
  on analysis.)
- All leaves (NIL) are black. (All leaves are same color as the root.)
- Both children of every red node are black.
- Every simple path from a given node to any of its descendant leaves contains the same 
  number of black nodes.

These constraints enforce a critical property of red–black trees: that the path from the 
root to the furthest leaf is no more than twice as long as the path from the root to the 
nearest leaf. The result is that the tree is roughly height-balanced. Since operations 
such as inserting, deleting, and finding values require worst-case time proportional to 
the height of the tree, this theoretical upper bound on the height allows red–black trees 
to be efficient in the worst case, unlike ordinary binary search trees. Red–black trees 
are in general not weight-balanced; that is, sibling nodes can have hugely differing 
numbers of descendants.
